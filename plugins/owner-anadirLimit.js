const handler = async (m, {conn, text}) => {
  let who;

  // Obtener usuario de diferentes formas
  if (m.mentionedJid && m.mentionedJid.length > 0) {
    who = m.mentionedJid[0];
  } else if (m.quoted) {
    who = m.quoted.sender;
  } else if (text) {
    const numberMatch = text.match(/\d+/g);
    if (numberMatch && numberMatch.length > 1) {
      // El primer n√∫mero es el usuario, el segundo la cantidad
      who = numberMatch[0] + '@s.whatsapp.net';
    }
  }

  if (!who) {
    // Reacci√≥n de error
    try {
      await conn.sendMessage(m.chat, {
        react: {
          text: '‚ùå',
          key: m.key
        }
      });
    } catch (reactError) {}

    throw '‚ùå *DEBES MENCIONAR UN USUARIO*\n\nPuedes:\n‚Ä¢ Etiquetar al usuario: !a√±adirdiamantes @usuario 50\n‚Ä¢ Responder a su mensaje: !a√±adirdiamantes 50\n‚Ä¢ Usar n√∫mero: !a√±adirdiamantes 123456789 50';
  }

  if (!text) {
    // Reacci√≥n de error
    try {
      await conn.sendMessage(m.chat, {
        react: {
          text: '‚ùå',
          key: m.key
        }
      });
    } catch (reactError) {}

    throw '‚ùå *DEBES ESPECIFICAR LA CANTIDAD DE DIAMANTES*\n\nEjemplo: !a√±adirdiamantes @usuario 100';
  }

  // Extraer la cantidad de diamantes del texto (eliminar menciones y n√∫meros de usuario)
  const txt = text.replace(/@\d+/g, '').replace(/\d+@s\.whatsapp\.net/g, '').trim();
  const cantidadMatch = txt.match(/\d+/);

  if (!cantidadMatch) {
    // Reacci√≥n de error
    try {
      await conn.sendMessage(m.chat, {
        react: {
          text: '‚ùå',
          key: m.key
        }
      });
    } catch (reactError) {}

    throw '‚ùå *CANTIDAD NO V√ÅLIDA*\n\nDebes especificar cu√°ntos diamantes agregar.\nEjemplo: !a√±adirdiamantes @usuario 50';
  }

  const diamantes = parseInt(cantidadMatch[0]);
  if (diamantes < 1) {
    // Reacci√≥n de error
    try {
      await conn.sendMessage(m.chat, {
        react: {
          text: '‚ùå',
          key: m.key
        }
      });
    } catch (reactError) {}

    throw '‚ùå *CANTIDAD M√çNIMA NO V√ÅLIDA*\n\nDebes agregar al menos 1 diamante.';
  }

  // Verificar si el usuario existe en la base de datos
  const users = global.db.data.users;
  if (!users[who]) {
    // Reacci√≥n de error
    try {
      await conn.sendMessage(m.chat, {
        react: {
          text: '‚ùå',
          key: m.key
        }
      });
    } catch (reactError) {}

    return conn.reply(m.chat, 
      `‚ùå *USUARIO NO ENCONTRADO*\n\n@${who.split('@')[0]} no est√° registrado en la base de datos.\n\nEl usuario necesita usar el bot al menos una vez.`, 
      m, { mentions: [who] }
    );
  }

  // Agregar diamantes al usuario
  const diamantesAntes = users[who].limit;
  users[who].limit += diamantes;
  const diamantesDespues = users[who].limit;

  // Reacci√≥n de √©xito
  try {
    await conn.sendMessage(m.chat, {
      react: {
        text: 'üíé',
        key: m.key
      }
    });
  } catch (reactError) {}

  const message = `
‚îå‚îÄ‚îÄ„Äå üíé DIAMANTES AGREGADOS „Äç
‚îÇ
‚îÇ üë§ *Usuario:* @${who.split('@')[0]}
‚îÇ 
‚îÇ üí∞ *Diamantes:*
‚îÇ ‚û∫ Antes: ${diamantesAntes} üíé
‚îÇ ‚û∫ Agregado: +${diamantes} üíé
‚îÇ ‚û∫ Despu√©s: ${diamantesDespues} üíé
‚îÇ 
‚îÇ ‚ú® ¬°Tesoro incrementado!
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`.trim();

  conn.reply(m.chat, message, m, {
    mentions: [who]
  });
};

handler.command = /^(a√±adirdiamantes|addd|dard|dardiamantes|agregardiamantes|dardiamentes|dardiamente)$/i;
handler.rowner = true;
handler.help = ['a√±adirdiamantes @usuario cantidad'];

export default handler;