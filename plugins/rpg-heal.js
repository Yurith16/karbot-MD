const handler = async (m, {conn, args}) => {
  const user = global.db.data.users[m.sender];

  if (user.health >= 100) {
    // Reacci√≥n para salud llena
    try {
      await conn.sendMessage(m.chat, {
        react: {
          text: '‚ù§Ô∏è',
          key: m.key
        }
      });
    } catch (reactError) {}

    return conn.reply(m.chat, `*‚ù§Ô∏è SALUD COMPLETA*\n\nTu salud ya est√° al m√°ximo: *${user.health} HP*`, m);
  }

  const heal = 40 + (user.cat * 4);
  const count = Math.max(1, Math.min(Number.MAX_SAFE_INTEGER, 
    (isNumber(args[0]) && parseInt(args[0]) || Math.round((90 - user.health) / heal)))) * 1;

  if (user.potion < count) {
    // Reacci√≥n para pociones insuficientes
    try {
      await conn.sendMessage(m.chat, {
        react: {
          text: '‚ùå',
          key: m.key
        }
      });
    } catch (reactError) {}

    const message = `
‚îå‚îÄ‚îÄ„Äå ü•§ POCIONES INSUFICIENTES „Äç
‚îÇ
‚îÇ ‚ùå *No tienes suficientes pociones*
‚îÇ
‚îÇ üìä *Necesitas:* ${count} pociones
‚îÇ üì¶ *Tienes:* ${user.potion} pociones
‚îÇ ‚ù§Ô∏è *Salud actual:* ${user.health} HP
‚îÇ
‚îÇ üí∞ *Faltan:* ${count - user.potion} pociones
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`.trim();

    return conn.reply(m.chat, message, m);
  }

  user.potion -= count * 1;
  user.health += heal * count;

  // Reacci√≥n para curaci√≥n exitosa
  try {
    await conn.sendMessage(m.chat, {
      react: {
        text: 'üíö',
        key: m.key
      }
    });
  } catch (reactError) {}

  const message = `
‚îå‚îÄ‚îÄ„Äå üíö CURACI√ìN EXITOSA „Äç
‚îÇ
‚îÇ ‚úÖ *Usaste:* ${count} pociones
‚îÇ ‚ù§Ô∏è *Salud recuperada:* +${heal * count} HP
‚îÇ üíö *Salud actual:* ${user.health} HP
‚îÇ üì¶ *Pociones restantes:* ${user.potion}
‚îÇ
‚îÇ üéØ *¬°Listo para la aventura!*
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`.trim();

  conn.reply(m.chat, message, m);
};

handler.help = ['heal'];
handler.tags = ['xp'];
handler.command = /^(heal|curar|curarse|sanar)$/i;

export default handler;

function isNumber(number) {
  if (!number) return number;
  number = parseInt(number);
  return typeof number == 'number' && !isNaN(number);
}